# Default values for matrix-authentication-service.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: ghcr.io/matrix-org/matrix-authentication-service
  # -- image pull policy. if image.tag is set to "latest", set to "Always"
  pullPolicy: IfNotPresent
  # -- Overrides the image tag whose default is the chart appVersion.
  tag: ""

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # -- Specifies whether a service account should be created
  create: true
  # -- Automatically mount a ServiceAccount's API credentials?
  automount: true
  # -- Annotations to add to the service account
  annotations: {}
  # -- The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}
podLabels: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  # -- annotations for your service
  annotations: {}
  # -- type of service
  type: ClusterIP
  # -- targetPort of service. should be the same as port for bindaddr
  targetPort: 8080
  # -- Port of service
  port: 80

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

livenessProbe:
  # -- enable a liveness probe on the deployment
  enabled: false
  httpGet:
    path: /
    port: http

readinessProbe:
  # -- enable a readiness probe on the deployment
  enabled: false
  httpGet:
    path: /
    port: http

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# Additional volumes on the output Deployment definition.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

nodeSelector: {}

tolerations: []

affinity: {}

# PostgreSQL Database configuration for synapse, for more options:
# https://github.com/bitnami/charts/tree/main/bitnami/postgresql
postgresql:
  # -- Whether to deploy the Bitnami Postgresql sub chart
  # If postgresql.enabled is set to true, externalDatabase.enabled must be set to false
  # else if externalDatabase.enabled is set to true, postgresql.enabled must be set to false
  enabled: true
  # persistence:
  #   enabled: false
  volumePermissions:
    # -- Enable init container that changes the owner and group of the PVC
    enabled: true

  tls:
    # -- Enable TLS traffic support for postgresql, see [bitnami/charts/postgresql#securing-traffic-using-tls](https://github.com/bitnami/charts/tree/main/bitnami/postgresql#securing-traffic-using-tls)
    enabled: false
    # -- Generate automatically self-signed TLS certificates
    autoGenerated: false
    # -- Whether to use the server's TLS cipher preferences rather than the client's
    preferServerCiphers: true
    # -- Name of an existing secret that contains the certificates
    certificatesSecret: ""
    # -- Certificate filename
    certFilename: ""
    # -- Certificate key filename
    certKeyFilename: ""
    # -- CA Certificate filename
    certCAFilename: ""
    # -- File containing a Certificate Revocation List
    crlFilename: ""

  global:
    postgresql:
      # global.postgresql.auth overrides postgresql.auth
      auth:
        # database credentials to use if you don't use an existingSecret
        # -- username of matrix-authentication-service postgres user
        username: mas
        # -- password of matrix-authentication-service postgres user - ignored using exsitingSecret
        password: changeme
        # -- which port to use to connect to your database server
        port: 5432
        # -- name of the database
        database: mas
        # -- Name of existing secret to use for PostgreSQL credentials
        existingSecret: ""
        # secretKeys to grab from existingSecret
        # if postgresql.existingSecret is provided, the following are ignored
        # postgresql.password/username/hostname/database
        secretKeys:
          # -- key in existingSecret with hostname of the database
          databaseHostname: hostname
          # -- key in existingSecret with name of the database
          database: database
          # -- key in existingSecret with username for matrix-authentication-service to connect to db
          databaseUsername: username
          # -- key in existingSecret with password for matrix-authentication-service to connect to db
          userPasswordKey: password
          # -- key in existingSecret with the admin postgresql password
          adminPasswordKey: postgresPassword

  # primary database node config
  primary:
    # -- run the scripts in templates/postgresql/initdb-configmap.yaml
    # If using an external Postgres server, make sure to configure the database
    # ref: https://github.com/matrix-org/synapse/blob/master/docs/postgres.md
    initdb:
      scriptsConfigMap: "{{ .Release.Name }}-postgresql-initdb"

    podSecurityContext:
      enabled: true
      runAsUser: 1000
      fsGroup: 1000

# Synapse Kubernetes resource settings
externalDatabase:
  # -- enable using an external database *instead of* the Bitnami PostgreSQL sub-chart
  # if externalDatabase.enabled is set to true, postgresql.enabled must be set to false
  enabled: false
  # optional SSL parameters for postgresql, if using your own db instead of the subchart
  # ref: https://www.postgresql.org/docs/current/libpq-connect.html#LIBPQ-PARAMKEYWORDS
  # -- sslmode to use, example: verify-full
  sslmode: ""
  # make sure any paths here are reflected in synapse.extraVolumes and synapse.extraVolumeMounts
  # -- optional: tls/ssl root cert for postgresql connections
  sslrootcert: ""
  # -- optional: tls/ssl cert for postgresql connections
  sslcert: ""
  # -- optional: tls/ssl key for postgresql connections
  sslkey: ""
  # database credentials to use if you don't use an existingSecret
  # -- username of matrix-authentication-service postgres user
  username: mas
  # -- password of matrix-authentication-service postgres user - ignored using exsitingSecret
  password: changeme
  # -- which port to use to connect to your database server
  port: 5432
  # -- hostname of db server. Can be left blank if using postgres subchart
  hostname: ""
  # -- name of the database to try and connect to
  database: "mas"
  # -- Name of existing secret to use for PostgreSQL credentials
  existingSecret: ""
  # if externalDatabase.existingSecret is provided, the following are ignored
  # password, username, hostname, database
  # secretKeys to grab from existingSecret
  secretKeys:
    # -- key in existingSecret with hostname of the database
    databaseHostname: hostname
    # -- key in existingSecret with name of the database
    database: database
    # -- key in existingSecret with username for matrix to connect to db
    databaseUsername: username
    # -- key in existingSecret with password for matrix to connect to db
    userPasswordKey: password
    # -- key in existingSecret with the admin postgresql password
    adminPasswordKey: postgresPassword

networkPolicies:
  enabled: true

# this stands for Matrix Authentication Service
mas:
  matrix:
    # -- name of your matrix home server (synapse or dendrite) with port if needed
    homeserver: "localhost:8008"
    # -- i don't know what this is
    secret: "test"
    # -- endpoint of your matrix home server (synapse or dendrite) with port if needed
    endpoint: "https://localhost:8008"
    # -- grab the above secret from an existing k8s secret. if set, ignores mas.matrix.secret
    existingSecret: ""
    # -- name of the key in existing secret to grab matrix.secret from
    secretKey: "secret"

  policy:
    data:
      # -- Users which are allowed to ask for admin access. If possible, use the
      # can_request_admin flag on users instead.
      admin_users: []
      #  - person1
      #  - person2

      # -- Client IDs which are allowed to ask for admin access with a
      # client_credentials grant
      admin_clients: []
      #  - 01H8PKNWKKRPCBW4YGH1RWV279
      #  - 01HWQCPA5KF10FNCETY9402WGF

      # Dynamic Client Registration
      client_registration:
        # -- don't require URIs to be on the same host. default: false
        allow_host_mismatch: true
        # -- allow non-SSL and localhost URIs. default: false
        allow_insecure_uris: true

      # Registration using passwords
      passwords:
        # -- minimum length of a password. default: 0
        min_length: 16
        # -- require at least one lowercase character in a password. default: false
        require_lowercase: true
        # -- require at least one uppercase character in a password. default: false
        require_uppercase: true
        # -- require at least one number in a password. default: false
        require_number: true

  # see: https://matrix-org.github.io/matrix-authentication-service/setup/sso.html?highlight=ulid#general-configuration
  upstream_oauth2:

    # -- use an existing k8s secret for upstream oauth2 client_id and client_secret
    existingSecret: ""
    secretKeys:
      # -- secret key to use in existing k8s secret for oauth2 client_id
      client_id: "client_id"
      # -- secret key to use in existing k8s secret for oauth2 client_secret
      client_secret: "client_secret"

    # only one provider supported at this time
    providers:
      - # A unique identifier for the provider
        # Must be a valid ULID, and can be generated using online tools like https://www.ulidtools.com
        # id: 01HFVBY12TMNTYTBV8W921M5FA
        id: ""

        # The issuer URL, which will be used to discover the provider's configuration.
        # If discovery is enabled, this *must* exactly match the `issuer` field
        # advertised in `<issuer>/.well-known/openid-configuration`.
        issuer: https://example.com/

        # A human-readable name for the provider,
        # which will be displayed on the login page
        human_name: Example

        # A brand identifier for the provider, which will be used to display a logo
        # on the login page. Values supported by the default template are:
        #  - `apple`
        #  - `google`
        #  - `facebook`
        #  - `github`
        #  - `gitlab`
        #  - `twitter`
        brand_name: zitadel

        # The client ID to use to authenticate to the provider
        client_id: ""

        # The client secret to use to authenticate to the provider
        # This is only used by the `client_secret_post`, `client_secret_basic`
        # and `client_secret_jwk` authentication methods
        client_secret: ""

        # Which authentication method to use to authenticate to the provider
        # Supported methods are:
        #   - `none`
        #   - `client_secret_basic`
        #   - `client_secret_post`
        #   - `client_secret_jwt`
        #   - `private_key_jwt` (using the keys defined in the `secrets.keys` section)
        token_endpoint_auth_method: client_secret_post

        # Which signing algorithm to use to sign the authentication request when using
        # the `private_key_jwt` or the `client_secret_jwt` authentication methods
        #token_endpoint_auth_signing_alg: RS256

        # The scopes to request from the provider
        # In most cases, it should always include `openid` scope
        scope: "openid email profile"

        # How the provider configuration and endpoints should be discovered
        # Possible values are:
        #  - `oidc`: discover the provider through OIDC discovery,
        #     with strict metadata validation (default)
        #  - `insecure`: discover through OIDC discovery, but skip metadata validation
        #  - `disabled`: don't discover the provider and use the endpoints below
        discovery_mode: oidc

        # Whether PKCE should be used during the authorization code flow.
        # Possible values are:
        #  - `auto`: use PKCE if the provider supports it (default)
        #    Determined through discovery, and disabled if discovery is disabled
        #  - `always`: always use PKCE (with the S256 method)
        #  - `never`: never use PKCE
        pkce_method: auto

        # The provider authorization endpoint
        # This takes precedence over the discovery mechanism
        authorization_endpoint: https://example.com/oauth2/authorize

        # The provider token endpoint
        # This takes precedence over the discovery mechanism
        token_endpoint: https://example.com/oauth2/token

        # The provider JWKS URI
        # This takes precedence over the discovery mechanism
        jwks_uri: https://example.com/oauth2/keys

        # How user attributes should be mapped
        #
        # Most of those attributes have two main properties:
        #   - `action`: what to do with the attribute. Possible values are:
        #      - `ignore`: ignore the attribute
        #      - `suggest`: suggest the attribute to the user, but let them opt out
        #      - `force`: always import the attribute, and don't fail if it's missing
        #      - `require`: always import the attribute, and fail if it's missing
        #   - `template`: a Jinja2 template used to generate the value. In this template,
        #      the `user` variable is available, which contains the user's attributes
        #      retrieved from the `id_token` given by the upstream provider.
        #
        # Each attribute has a default template which follows the well-known OIDC claims.
        #
        claims_imports:
          # The subject is an internal identifier used to link the
          # user's provider identity to local accounts.
          # By default it uses the `sub` claim as per the OIDC spec,
          # which should fit most use cases.
          subject:
            template: "{{ user.sub }}"

          # The localpart is the local part of the user's Matrix ID.
          # For example, on the `example.com` server, if the localpart is `alice`,
          #  the user's Matrix ID will be `@alice:example.com`.
          localpart:
            #action: force
            template: "{{ user.preferred_username }}"

          # The display name is the user's display name.
          displayname:
            #action: suggest
            template: "{{ user.name }}"

          # An email address to import.
          email:
            #action: suggest
            template: "{{ user.email }}"

            # Whether the email address must be marked as verified.
            # Possible values are:
            #  - `import`: mark the email address as verified if the upstream provider
            #     has marked it as verified, using the `email_verified` claim.
            #     This is the default.
            #   - `always`: mark the email address as verified
            #   - `never`: mark the email address as not verified
            set_email_verification: import
