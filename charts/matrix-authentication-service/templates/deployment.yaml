apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "matrix-authentication-service.fullname" . }}
  labels:
    {{- include "matrix-authentication-service.labels" . | nindent 4 }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "matrix-authentication-service.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "matrix-authentication-service.labels" . | nindent 8 }}
        {{- with .Values.podLabels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "matrix-authentication-service.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      initContainers:
        {{- if .Values.postgresql.enabled }}
        - name: postgresql-isready
          image: {{ .Values.postgresql.image.repository }}:{{ .Values.postgresql.image.tag }}
          env:
            - name: PGHOST
              valueFrom:
                secretKeyRef:
                  name: {{ include "matrix-authentication-service.postgresql.secretName" . }}
                  key: {{ include "matrix-authentication-service.postgresql.secretKeys.hostname" . }}
            - name: PGUSER
              valueFrom:
                secretKeyRef:
                  name: {{ include "matrix-authentication-service.postgresql.secretName" . }}
                  key: {{ include "matrix-authentication-service.postgresql.secretKeys.user" . }}
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "matrix-authentication-service.postgresql.secretName" . }}
                  key: {{ include "matrix-authentication-service.postgresql.secretKeys.password" . }}
            {{- if or .Values.postgresql.sslmode .Values.externalDatabase.sslmode }}
            {{- include "matrix-authentication-service.postgresql.sslEnvVars" . | nindent 12 }}
            {{- end }}
          command:
            - "sh"
            - "-c"
            - "until pg_isready -h $PGHOST -U $PGUSER; do sleep 2; done"
        {{- end }}

        - name: {{ .Chart.Name }}-generate-config
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command:
            - |
              config generate > /initial/config.yaml
          volumeMounts:
            - name: initial-config
              mountPath: "/initial"

        - name: add-secret-values-to-config
          image: "mikefarah/yq:latest"
          imagePullPolicy: Always
          env:
            - name: PG_URI
              value: {{ include "matrix-authentication-service.postgresUri" . }}
            - name: MATRIX_SECRET
              value: {{ include "matrix-authentication-service.matrix.secretName" . }}
            - name: MATRIX_HOMESERVER
              value: {{ .Values.mas.matrix.homeserver }}
            - name: MATRIX_ENDPOINT
              value: {{ .Values.mas.matrix.endpoint }}
          command:
            - /bin/sh
            - -ec
            - |
              cp /initial/config.yaml /data/config.yaml && \
              yq eval -i '.database.uri = env(PG_URI)' /data/config.yaml
              yq eval -i '.matrix.homeserver = env(MATRIX_HOMESERVER)' /data/config.yaml
              yq eval -i '.matrix.secret = env(MATRIX_SECRET)' /data/config.yaml
              yq eval -i '.matrix.endpoint = env(MATRIX_ENDPOINT)' /data/config.yaml
          volumeMounts:
            - name: initial-config
              mountPath: "/initial"
            - name: config
              mountPath: /data
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: http
              containerPort: {{ .Values.service.targetPort }}
              protocol: TCP
          {{- if .Values.livenessProbe.enabled }}
          livenessProbe:
            {{- toYaml .Values.livenessProbe | nindent 12 }}
          {{- end }}
          {{- with .Values.readinessProbe.enabled }}
          readinessProbe:
            {{- toYaml .Values.readinessProbe | nindent 12 }}
          {{- end }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          {{- with .Values.volumeMounts }}
          volumeMounts:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          env:
            - name: PGHOST
              valueFrom:
                secretKeyRef:
                  name: {{ include "matrix-authentication-service.postgresql.secretName" . }}
                  key: {{ include "matrix-authentication-service.postgresql.secretKeys.hostname" . }}
            - name: PGDATABASE
              valueFrom:
                secretKeyRef:
                  name: {{ include "matrix-authentication-service.postgresql.secretName" . }}
                  key: {{ include "matrix-authentication-service.postgresql.secretKeys.database" . }}
            - name: PGUSER
              valueFrom:
                secretKeyRef:
                  name: {{ include "matrix-authentication-service.postgresql.secretName" . }}
                  key: {{ include "matrix-authentication-service.postgresql.secretKeys.user" . }}
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "matrix-authentication-service.postgresql.secretName" . }}
                  key: {{ include "matrix-authentication-service.postgresql.secretKeys.password" . }}
            {{- if or .Values.postgresql.sslmode .Values.externalDatabase.sslmode }}
            {{- include "matrix-authentication-service.postgresql.sslEnvVars" . | nindent 12 }}
            {{- end }}
      volumes:
      {{- with .Values.volumes }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
        - name: initial-config
          emptyDir:
            sizeLimit: 500Mi
        - name: config
          persistentVolumeClaim:
            claimName: {{ include "matrix-authentication-service.fullname" . }}-config
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
