apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "matrix-authentication-service.fullname" . }}
  labels:
    {{- include "matrix-authentication-service.labels" . | nindent 4 }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "matrix-authentication-service.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "matrix-authentication-service.labels" . | nindent 8 }}
        {{- with .Values.podLabels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "matrix-authentication-service.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      initContainers:
        {{- if .Values.postgresql.enabled }}
        - name: postgresql-isready
          image: {{ .Values.postgresql.image.repository }}:{{ .Values.postgresql.image.tag }}
          env:
            - name: PGHOST
              valueFrom:
                secretKeyRef:
                  name: {{ include "matrix-authentication-service.postgresql.secretName" . }}
                  key: {{ include "matrix-authentication-service.postgresql.secretKeys.hostname" . }}
            - name: PGUSER
              valueFrom:
                secretKeyRef:
                  name: {{ include "matrix-authentication-service.postgresql.secretName" . }}
                  key: {{ include "matrix-authentication-service.postgresql.secretKeys.user" . }}
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "matrix-authentication-service.postgresql.secretName" . }}
                  key: {{ include "matrix-authentication-service.postgresql.secretKeys.password" . }}
            {{- if or .Values.postgresql.sslmode .Values.externalDatabase.sslmode }}
            {{- include "matrix-authentication-service.postgresql.sslEnvVars" . | nindent 12 }}
            {{- end }}
          command:
            - "sh"
            - "-c"
            - "until pg_isready -h $PGHOST -U $PGUSER; do sleep 2; done"
        {{- end }}

        {{- if .Values.existingMasConfigSecret }}
        - name: {{ .Chart.Name }}-cp-config-to-datadir
          image: alpine:latest
          {{- with .Values.securityContext }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          {{- end }}
          command:
            - /bin/sh
            - -ec
            - |
              cp /initial/config.yaml /data/config.yaml

          volumeMounts:
            - name: initial-config
              mountPath: "/initial"

            - name: config
              mountPath: /data
        {{- else -}} {{/* if no existingMasConfigSecret was set */}}
        - name: {{ .Chart.Name }}-generate-config-from-helm-values
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command:
            - |
              mas-cli config generate > /keys/config-secrets.yaml

          volumeMounts:
            - name: initial-config-keys-only
              mountPath: "/keys"

        - name: add-secret-values-to-config
          image: "mikefarah/yq:latest"
          imagePullPolicy: Always
          env:
            - name: PG_URI
              value: {{ include "matrix-authentication-service.postgresUri" . }}
            - name: MATRIX_SECRET
              value: {{ include "matrix-authentication-service.matrix.secretName" . }}
            - name: MATRIX_HOMESERVER
              value: {{ .Values.mas.matrix.homeserver }}
            - name: MATRIX_ENDPOINT
              value: {{ .Values.mas.matrix.endpoint }}
            {{- if .Values.mas.upstream_oauth2.existingSecret }}
            {{- if .Values.mas.upstream_oauth2.secretKeys.issuer }}
            - name: ISSUER
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.mas.upstream_oauth2.existingSecret }}
                  key: {{ .Values.mas.upstream_oauth2.secretKeys.issuer }}
            {{- end }} {{/* end oauth2 issuer */}}
            - name: CLIENT_ID
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.mas.upstream_oauth2.existingSecret }}
                  key: {{ .Values.mas.upstream_oauth2.secretKeys.client_id }}
            - name: CLIENT_SECRET
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.mas.upstream_oauth2.existingSecret }}
                  key: {{ .Values.mas.upstream_oauth2.secretKeys.client_secret}}
            {{- if .Values.mas.upstream_oauth2.secretKeys.authorization_endpoint}}
            - name: AUTH_ENDPOINT
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.mas.upstream_oauth2.existingSecret }}
                  key: {{ .Values.mas.upstream_oauth2.secretKeys.authorization_endpoint }}
            {{- end }} {{/* end auth endpoint */}}
            {{- if .Values.mas.upstream_oauth2.secretKeys.token_endpoint }}
            - name: TOKEN_ENDPOINT
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.mas.upstream_oauth2.existingSecret }}
                  key: {{ .Values.mas.upstream_oauth2.secretKeys.token_endpoint }}
            {{- end }} {{/* end token endpoint */}}
            {{- if .Values.mas.upstream_oauth2.secretKeys.userinfo_endpoint }}
            - name: USERINFO_ENDPOINT
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.mas.upstream_oauth2.existingSecret }}
                  key: {{ .Values.mas.upstream_oauth2.secretKeys.userinfo_endpoint }}
            {{- end }} {{/* user info endpoint */}}
            {{- end }} {{/* end check for oauth2 existing secret */}}
            {{- if .Values.mas.masClientSecret.existingSecret }}
            - name: MAS_CLIENT_ID
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.mas.masClientSecret.existingSecret }}
                  key: {{ .Values.mas.masClientSecret.secretKeys.client_id }}
            - name: MAS_CLIENT_SECRET
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.mas.masClientSecret.existingSecret }}
                  key: {{ .Values.mas.masClientSecret.secretKeys.client_secret }}
            {{- end }}
          command:
            - /bin/sh
            - -ec
            - |
              cp /initial/config.yaml /data/config.yaml && \
              SECRETS="yq '.secrets' /keys/config-secrets.yaml" && \
              {{- if .Values.mas.upstream_oauth2.existingSecret }}
              yq eval -i '.upstream_oauth2.providers[0].issuer = env(ISSUER)' /data/homeserver.yaml && \
              yq eval -i '.upstream_oauth2.providers[0].client_id = env(CLIENT_ID)' /data/homeserver.yaml && \
              yq eval -i '.upstream_oauth2.providers[0].client_secret = env(CLIENT_SECRET)' /data/homeserver.yaml && \
              {{- if .Values.mas.upstream_oauth2.secretKeys.authorization_endpoint }}
              yq eval -i '.upstream_oauth2.providers[0].authorization_endpoint = env(AUTH_ENDPOINT)' /data/homeserver.yaml && \
              {{- end }} {{/* end auth endpoint */}}
              {{- if .Values.mas.upstream_oauth2.secretKeys.token_endpoint }}
              yq eval -i '.upstream_oauth2.providers[0].token_endpoint = env(TOKEN_ENDPOINT)' /data/homeserver.yaml && \
              {{- end }} {{/* end token endpoint */}}
              {{- if .Values.mas.upstream_oauth2.secretKeys.userinfo_endpoint }}
              yq eval -i '.upstream_oauth2.providers[0].userinfo_endpoint = env(USERINFO_ENDPOINT)' /data/homeserver.yaml && \
              {{- end }} {{/* end oauth2 userinfo endpoint */}}
              {{- end }} {{/* end check for existing oauth2 secret */}}
              {{- if .Values.mas.masClientSecret.existingSecret }}
              yq eval -i '.clients[0].client_id = env(MAS_CLIENT_ID)' /data/homeserver.yaml && \
              yq eval -i '.clients[0].client_secret = env(MAS_CLIENT_SECRET)' /data/homeserver.yaml && \
              {{- end }} {{/* end mas client secret existingSecret */}}
              yq eval -i '.secrets = env(SECRETS)' /data/config.yaml && \
              yq eval -i '.database.uri = env(PG_URI)' /data/config.yaml && \
              yq eval -i '.matrix.homeserver = env(MATRIX_HOMESERVER)' /data/config.yaml && \
              yq eval -i '.matrix.secret = env(MATRIX_SECRET)' /data/config.yaml && \
              yq eval -i '.matrix.endpoint = env(MATRIX_ENDPOINT)' /data/config.yaml

          volumeMounts:
            - name: initial-config-keys-only
              mountPath: "/keys"

            - name: initial-config
              mountPath: "/initial"

            - name: config
              mountPath: /data
        {{- end }} {{/* end if not existingMasConfigSecret */}}

      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
            - name: MAS_CONFIG
              value: /data/config.yaml
          command:
            - server
          ports:
            - name: http
              containerPort: {{ .Values.service.targetPort }}
              protocol: TCP
          {{- if .Values.livenessProbe.enabled }}
          livenessProbe:
            {{- toYaml .Values.livenessProbe | nindent 12 }}
          {{- end }}
          {{- with .Values.readinessProbe.enabled }}
          readinessProbe:
            {{- toYaml .Values.readinessProbe | nindent 12 }}
          {{- end }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          volumeMounts:
          {{- with .Values.extraVolumeMounts }}
            {{- toYaml . | nindent 12 }}
          {{- end }}
            - name: config
              mountPath: /data
          env:
            - name: PGHOST
              valueFrom:
                secretKeyRef:
                  name: {{ include "matrix-authentication-service.postgresql.secretName" . }}
                  key: {{ include "matrix-authentication-service.postgresql.secretKeys.hostname" . }}
            - name: PGDATABASE
              valueFrom:
                secretKeyRef:
                  name: {{ include "matrix-authentication-service.postgresql.secretName" . }}
                  key: {{ include "matrix-authentication-service.postgresql.secretKeys.database" . }}
            - name: PGUSER
              valueFrom:
                secretKeyRef:
                  name: {{ include "matrix-authentication-service.postgresql.secretName" . }}
                  key: {{ include "matrix-authentication-service.postgresql.secretKeys.user" . }}
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "matrix-authentication-service.postgresql.secretName" . }}
                  key: {{ include "matrix-authentication-service.postgresql.secretKeys.password" . }}
            {{- if or .Values.postgresql.sslmode .Values.externalDatabase.sslmode }}
            {{- include "matrix-authentication-service.postgresql.sslEnvVars" . | nindent 12 }}
            {{- end }}
      volumes:
      {{- with .Values.extraVolumes }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
        - name: initial-config-keys-only
          emptyDir:
            sizeLimit: 500Mi

        - name: initial-config
          secret:
            {{- if .Values.existingMasConfigSecret }}
            secretName: {{ .Values.existingMasConfigSecret }}
            {{- else -}}
            secretName: {{ template "matrix-authentication-service.fullname" . }}-initial-config-secret
            {{- end }}

        - name: config
          persistentVolumeClaim:
            {{- if .Values.configVolume.existingClaim }}
            claimName: {{ .Values.configVolume.existingClaim }}
            {{- else -}}
            claimName: {{ include "matrix-authentication-service.fullname" . }}-config
            {{- end }}

      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
